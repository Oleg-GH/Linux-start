
sudo apt update         # обновить список репозиториев

sudo apt install <имя файла>    # установить пакет

uname                   # вывести имя ОС

uname -a                # вывести имя ОС с подробностями

hostnamectl             # запросить имя хоста (машины)

lsb_release -a          # вывести инфо о дистрибутиве
cat /etc/os-release
cat /etc/issue

sudo apt install mc     # установить пакет mc
mc                      # запустить Midnight Commander

sudo apt install openssh-server # установить ssh-сервер
sudo systemctl start ssh    # запустить ssh
sudo systemctl status ssh   # запросить статус ssh
sudo systemctl enable ssh   # сделать доступным
ssh db@<IP-addrecc>         # подсоединиться к вирт.машине с хоста через клиент

sudo apt install tree       # установка команды tree

history                     # вывести историю команд

hostname -I,  ip addr, ip a # вывести внешний IP-адрес

sudo usermod -aG vboxsf db  # для разблокировки общей папки в Ubuntu (db - это имя пользователя)

############################################################### Файлы и папки

# Общие команды Linux для работы с файлами и папками. Вызов документации по командам

echo "Hello, world!"        # Напишем первую команду в терминале. По традиции это вывод текста Hello, world!
echo 'Hello, world!'
echo Hello, world!

clear                       # Очистка экрана
Ctrl + L
reset (+ сброс настроек)

whoami                      # Просмотреть текущего пользователя
who
id
groups                      # можно посмотреть список групп, куда включен текущий пользователь
                            # если указать имя пользователя, то выйдет список групп для указанного пользователя

sudo su                     # входим в режим рута
exit                        # выход из режима рута в текущего пользователя

# Перемещение по директориям

pwd                         # Текущую директорию можно посмотреть с помощью команды pwd:
$(pwd)/<имя файла>          # так можно обозначить абсолютный путь к файлу

cd ..                       # Поднимемся на уровень выше, чтобы оказаться в директории /home

cd ubuntu                   # Вернемся в директорию /home/ubuntu с помощью команды cd ubuntu:

cd /home                    # Теперь еще раз зайдем в директорию /home (относит.путь), но используем другую команду: 

cd /home/ubuntu             # зайдем еще раз в домашнюю директорию, но посредством указания абсолютного пути

cd ~                        # Еще один способ попасть в домашнюю директорию — применить команду 

cd /                        # перейти в корневую папку. Это директория самого верхнего уровня, она обозначается как /. 

cd -                        # попадаем в предыдущую локацию

# Просмотр содержимого директории

ls                          # Посмотреть содержимое директории можно с помощью команды ls:

#!! Отличие в отображении файлов и папок

ls /home/                   # Показать домашние директории пользователей

ls -l                       # Посмотреть расширенную информацию о файлах и папках в данной директории можно с помощью команды 
                            # Здесь мы видим не только названия файлов и папок, но и информацию о правах на файлы, 
                            # список владельцев файлов, размер и дату последнего модифицирования

ls -a                       # Чтобы увидеть еще и скрытые файлы (их название начинается с точки) 

ls -la                      # а чтобы совместить показ скрытых файлов с расширенной информацией о файлах 
ll                          # примерно то же самое

ls -i   или                 # посмотреть инфу о папках и файлах в тек.папке вместе с inode (системные номера)
ls -li                      # посмотреть инфу о файлах в тек.папке вместе с inode (системные номера)

cd /home     или            # посмотреть содержимое папки, не заходя в нее (указывается абсолютный или относительный путь) 
cd -l /home                 # если нужна подробная информация о файлах

# Создание и изменение папок

mkdir test_dir              # Вернемся в домашнюю директорию и создадим там папку test_dir с помощью команды 

mkdir dir1 dir2 dir3        # можно создавать несколько папок одного уровня одновременно

mkdir 2/3/4 -p              # можно создавать вложенные друг в друга папки

ls                          # проверим наличие новой папки в домашней директории, введя команду

echo > newFile1.txt         # Способы создания файла:
touch newFile3.txt
> newFile4.txt
cat > newFile2.txt
cat newFile2.txt            # это еще и способ просмотра содержимого файла

nano newFile5.txt

    # Копирование файлов
cp *.txt dir2               # скопировать все текстовые файлы из текущей директории в папку dir2

# Копирование папок - применяется ключ -r
cp dir2/ dir3 -r            # скопировать папку dir2 в dir3. 

mv test_dir test_dir2       # переместить или переименовывать файлы и папки. Переименуем папку test_dir в test_dir2 


ls                          # и проверим содержимое текущей директории
ls /var                     # для какой-то определенной папки, например, var

    # Удаление файлов и папок

# Файлы и директории удаляются с помощью команды rm. В случае директорий нужно указывать дополнительный параметр -r, который отвечает за рекурсивное удаление, так как должна быть удалена не только сама директория, но и ее содержимое: 
rm -r test_dir2

ls                          # После этого проверим, что из текущей папки исчезла test_dir2

    # Создание текстовых файлов

# А теперь создадим пустой текстовый файл test.txt, используя команду echo без аргументов
echo > test.txt   или
touch test.txt    или
> test.txt        или
cat > test.txt          # в данном варианте необходимо сразу же ввести данные, текст, который станет содержимым файла.
ctrl d                  # завершение процесса создания файла через cat.                        

ls                      # Проверим содержимое директории

echo Hello > test.txt   # Запишем текст в этот файл

less test.txt           # Посмотрим на содержимое файла при помощи команды 

echo world >> test.txt  # Выйти из просмотра файла можно, нажав клавишу q. Допишем в файл слово world 

less test.txt           # Просмотрим содержимое файла

echo “new text” > test.txt  # А теперь перезапишем содержимое файла с помощью команды 
                        # (в этот раз текст взят в двойные кавычки, т.к. это более приемлемый вариант для работы с ним) 

less test.txt           # и проверим содержимое test.txt, используя 

cp test.txt test2.txt   # Видим, что старый текст исчез и на его месте появился новый. Создадим копию файла в той же директории 

ls                      # Затем проверим содержимое текущей директории и увидим там два текстовых файла

rm test.txt             # Удалим старый файл 

mv test2.txt new/       # Затем создадим папку new и переместим туда файл test2.txt 

ls                      # Посмотрим содержимое текущего каталога

ls new                  # а затем — содержимое папки new

mv new/test2.txt new/test3.txt  # Переименуем файл test2.txt в test3.txt, не заходя в папку new 

ls                      # Убедимся, что файл переименован, используя команду 

rm -r new               # Удалим папку new рекурсивно

ls                      # и убедимся, что домашняя директория пуста

    # Варианты удаления:
rm <наименование папки> # удаление папки с указанным названием
rmdir                   # безопасное удаление пустых папок
rm * -r                 # удалится все из текущей директории без возможности восстановления
rm -rf /                # удалится форсированно все, до чего команда дотянется, особенно если в начале будет стоять sudo


#!! При наборе названий файлов и папок в терминале не обязательно вводить их имена полностью — достаточно нажать клавишу Tab, чтобы имя продолжилось автоматически. 
#!! Также удобно применять клавиши «Вниз» и «Вверх», если требуется заново набрать команду, которая уже была введена до этого

    # Вызов документации по командам

ls --help               # Чтобы просмотреть информацию по команде, достаточно набрать ее и --help после нее 
whatis ls               # тоже справка

man ls                  # Другой вариант вызова информации — команда man (от слова manual). 

q                       # Чтобы выйти из мануала, следует нажать клавишу q

############################################################## less, more, tail, head   просмотровщики (пейджеры)

more --help             # глянем справку

man more                # еще более подробная справка

more mciri_poem.txt     # выведем текст файла mciri_poem.txt (страницы через пробел)
q                       # выход из файла

more -10 +/однажды ~/mciri_poem.txt # поиск слова "однажды" в указанном файле, вывод по 10 строк

more +33 -15 mciri_poem.txt     # выведем по 15 строк, начиная с 33 строки

less -p "однажды" ~/mciri_poem.txt  # найдем место, где встречается слово «однажды».  -р - это поиск

less -N -I -p "и " mciri_poem.txt  # найдем место, где встречается буква «и » с пробелом
                                  # -N   это номера строк, где встречается буква "и " с пробелом
                                  # -I   значит, поиск будет регистронезависимый

head 2 mciri_poem.txt   # выведем первые две строки из файла

head -с 32 mciri_poem.txt   # выведем первые 32 байта из файла (16 символов)

tail mciri_poem.txt     # получаем 10 строк с конца

tail -3 mciri_poem.txt  # вывведем из файла последние 3 строки  (т.е. как head, только с конца)

############################################################## nano     - текстовый редактор
nano test.txt 
nano ls.txt

nano mciri_poem.txt -B         # Запуск с резервной копией (создается резервная копия с  ~ на конце имени файла)
nano +200,15 mciri_poem.txt     # после открытия файла в редакторе курсор сразу устанавливается на 200й строке 15й символ

# горячие клавиши:
	Ctrl+x – выйти
	Ctrl+k – вырезать строку с курсором
	Ctrl+u – вставить из буфера, в месте курсора
	Ctrl+6 – начать выделение
	Ctrl+Shift+6 – скопировать выделенное
	Ctrl+w – поиск строки
	Ctrl+\ - поиск с заменой
	Ctrk+r – вставка из другого файла в текущее место курсора
	Ctrl+c - Показать позицию курсора
	Ctrl+_ (Ctrl+Shift+-) - Переместить курсор в позицию

############################################################## vim   редактор (улучшенный vi )
vimtutor - обучалка
o	Возможно, потребуется установить (обучалку): 
	sudo apt install vim-runtime    # расширенная версия vim  
vimtutor ru                         # обучалка

vim test.txt                        # Редактируем файлы с помощью редактора vim
vim ls.txt 

# горячие клавиши (в режиме команд (normal)):
o	:w <Enter> - сохраним файл
o	:q <Enter> - выйдем из редактора (или  :q! выйти без вопросов)
o	dd – вырезает строку
o	5dd – вырезает 5 строк
o	2dw – вырезает 2 слова
o	p – вставить из буфера
o	u – undo
o	3u – undo 3 times
o	2w – на 2 слова вправо
o	10h – на 10 символов влево
o	3j – на 3 строки вниз
o	3k – на 3 строки вверх
o	/строка – ищет строку
o	n – перейти к следующему результату поиска
o	Shift+n – перейти к предыдущему результату поиска

# режимы vim
o	(Esc) normal: режим команд
o	вставки
	(i) insert: режим вставки
	(a) append: режим вставки
	(R) replace: режим замены
o	 (v) visual: визуальный – для работы с выделеным текстом
o	(:!) режим внешних команд

#################################################### Ссылки

ls -li                              # выведем содержимое папки вместе с inodes (ключик -i)
	в первой колонке номера inode

echo hi all > original_file         # создадим файл

ln original_file hardlink           # создадим жесткую ссылку на него

ln -s original_file softlink        # создадим мягкую ссылку на него

##################################################### Првва доступа

# Посмотреть информацию по пользователям, группам и паролям пользователей можно командами

cat /etc/passwd      # список пользователей
cat /etc/group      # группы пользователей
cat /etc/shadow     # пароли пользователей (в хэшкод виде)

# Управление пользователями:
                                                            Создается юзер без пароля (useradd)
sudo useradd -s /bin/bash -m -d /home/testuser testuser1    -s установка оболочки (параметр Shell)
                                                            -m  установка домашней директории
                                                            -d  задаем точный путь дом.директории
                                                            testuser1   -    логин
                                                Проверяем результат командой   tail /etc/passwd
        Но лучше использовать команду adduser - он сразу задает пароль
sudo adduser testuser2 <Enter>      Все создается автоматически + задаем пароль
usermod
userdel -r
passwd
chage
groupadd
groupdel

#################################################### Работа с пользователями

whoami              # Информация о пользователе

groups              # В каких группах состоит текущий пользователь

sudo useradd -m -s /bin/bash user1      # Создание пользователя

sudo passwd user1   # Определяем пароль для пользователя user1 (из-под текущего пользователя)

useradd -D          # Параметры будут даны пользователю после создания по умолчанию

su user1            # Зайдём в оболочку под другим пользователем

whoami              # Проверим

exit                # Выйти из сессии этого пользователя

whatis userdel      # удаление пользователя
userdel -- help
userdel -fr user1

sudo usermod –L user1   #заблокировать пользователя
sudo usermod –U user1   #разблокировать пользователя

sudo usermod -aG sudo user1 # дать пользователю user1 права суперпользователя (root), добавив его в группу "sudo" (-G), 
                            # не удаляя его при этом из других групп (-а)

sudo deluser user1 sudo     # удалить пользователя user1 из папки sudo, лишив его прав суперпользователя

sudo su             # переключимся в режим суперпользователя (root)
	В строке приглашения знак $ изменился на #

whoami              # убедимся, что мы работаем под суперпользователем

apt update          # в данном режиме не требуется для привилегированных операций каждый раз набирать префикс sudo

exit                # выйдем из этого режима

apt update
sudo apt update     # в обычном режиме (без привилегий) команду обновления репозиториев надо выполнять 
                    # с префиксом sudo, иначе получим ошибку нехватки прав

sudo useradd -m -d /home/user2 -s /bin/bash user2   # создать пользователя отдельно без пароля

sudo passwd user1   # зададим пароль пользователю

su user1            # зайдем из-под него

whoami              # убедимся, что мы работаем под новым пользователем

more /etc/passwd    # заглянем в файлик passwd

more /etc/passwd | grep ^user   # можно отфильтровать по имени пользователя

more /etc/group     # список групп

sudo more /etc/shadow    # пароли всех пользователей (их хэши)

sudo userdel –f user9   # удалим с ключом  –f (force, принудительно)
sudo userdel user9 -r   # удалим с ключом  –r (рекурсивно)

groupadd dev_team   # создадим группу dev_team

more /etc/group | grep dev  # проверим

sudo usermod -G dev_team user11 # добавим в группу участника команды разработки (user11)

#################################################### Права доступа
# Команда chmod

chmod o+w header.txt        # Предоставить другим пользователям (other) права на запись в файл header.txt

chmod go-rw header.txt      # Можно менять несколько прав для ряда категорий (u - user, g - group, o - other)

chmod u+w,g+r header.txt    # Другие варианты работы с правами (юзеру - записывать, группе - только читать)
chmod -rw header.txt        # забрать права на чтение и запись
chmod u=rwx,g=wr,o=r header.txt # юзеру - все права, группе - читать и записывать, остальным - только читать

•	0: (000) No permission.                     # задание прав триадами цифр
•	1: (001) Execute permission.                # --x
•	2: (010) Write permission.                  # -w-
•	3: (011) Write and execute permissions.     # -wx
•	4: (100) Read permission.                   # r--
•	5: (101) Read and execute permissions.      # r-x
•	6: (110) Read and write permissions.        # rw-
•	7: (111) Read, write, and execute permissions.  # rwx
chmod 770 header.txt                            # rwxrwx---

chmod 762 .                                     # точка означает применение изменения прав к текущей папке 
chmod 762 -R .                                  # к папке и ко всем файлам внутри него

chmod 777 -R ~/lesson3      # ключ -R для задания рекурсивного изменения прав

sudo chown user1 header.txt # Изменяем владельца файла
 
chmod +t filename           # Sticky bit нужен для запрета удаления файлов всем, кроме владельца
chmod +t .                  # эта команда применится для текущей папки

chmod u+s filename          # установить флаг SUID

chmod u-s filename          # снять флаг SUID
 
chmod g+s filename          # установить флаг SGID

chmod g-s filename          # снять флаг SGID

#################################################### Смена владельца
# Команда chown
# Изменяет владельцев файла или папки, а также группу владельцев

sudo chown user2 f1         # сменим владельца файла f1

sudo chown :dev_team f1     # сменим группу владельцев (т.е. группу указываем после двоеточия. Иначе сменится пользователь)

sudo chown student:student –R . # сменим одновременно владельца и группу владельцев

##################################################### umask
# Данная команда задает правило по умолчанию задания прав для вновь создаваемых файлов.
# Обычно она устанавливается 0002, дает права типа -rw-rw-r--.
# Маска umask 333 задает права типа -r--r--r-- (для создаваемых после этого файлов)
# Команда действует только на текущую сессию. В след. раз она сбрасывается

#######################################################	apt / apt-get

sudo apt update                         # получить список обновлений для всех пакетов ОС

sudo apt list --upgradable              # узнать: кому именно нужны обновления

sudo apt upgrade                        # запустить обновление

sudo apt-get install zip                # Установка программ
sudo apt install tree

sudo apt-get remove zip                 # удалим пакет zip
sudo apt-get purge zip                  # можно удалить пакет вместе с конфигами:

# dpkg

dpkg -l                                 # посмотрим все пакеты на машине Linux
dpkg –l tree                            # посмотрим инфо о пакете tree
dpkg -l | wc -l                         # посмотрим количество установленных пакетов
dpkg –l | grep pyhton3                  # Фильтрация списка ПО конвейером
dpkg -i package_name                    # установить пакет или группу пакетов
dpkg -r package_name                    # удалить пакет или группу пакетов


# snap

sudo apt install snapd                  # если snap не установлен, то это можно сделать

sudo snap find opera                    # поиск пакета в snap

sudo snap install opera                 # установим браузер Опера через snap

snap list                               # посмотрим список установленных snap-пакетов

snap remove opera                       # удалим Оперу через snap

sudo nano /etc/apt/preferences.d/nosnap.pref    # тут у меня стоял запрет на установку snap

#######################################################	Работа с репозиториями

cat /etc/apt/sources.list               # посмотрим содержимое файла со списком репозиториев

apt-add-repository --help               # apt-add-repository - команда для добавления репозиториев


####################################################### Cron  https://crontab.guru/

crontab --help                          # справка

crontab -l                              # просмотр списка заплалнированных команд текущего пользователя

crontab –e                              # редактирование списка задач текущего пользователя

crontab -r                              # удаление списка задач текущего пользователя

# шпаргалка по синтаксису
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * [user-name]  command to be executed

https://crontab.guru/                   # сайт тренажера

# примеры cron из методички

5 19 15 5 5 /var/www_mysite/myssqlss.pl # Выполнять задание в 19 часов 5 минут 15 мая, если это пятница

10 */2 * * * /var/www_mysite/mysql_script.pl    # Выполнять задание раз в два часа в 10 минут текущего часа 
                                                # (то есть в 00:10, 02:10, 04:10 и т.д.)

10 */10 * * /var/www_mysite/exescripts.pl       # Выполнять задание каждые десять часов в 10 минут текущего часа 
                                                # (то есть в 00:10, 10:10 и т.д.)

26 12 * * 0 /var/www_mysite/myscript.sh         # Выполнять задание по воскресеньям в 12 часов 26 минут:

0 10 * * * /var/www_mysite/myscript.sh          # Выполнять в 10 утра каждый день:

sudo cat /var/spool/cron/crontabs/student       # путь к файлу с задачами cron для текущего пользователя

cat /etc/crontab                                # системные задачи лежат в файле

grep cron /var/log/syslog                       # просмотр логов 

#######################################################	iptables

sudo apt install iptables                                   # если вдруг утилита не установлена

sudo iptables -t filter -A INPUT -s 192.168.56.1 -j DROP    # заблокируем трафик с определенного IP-адреса
# или так:                                                  # без всяких ответных действий (как невидимка)
sudo iptables -t filter -A INPUT -s 192.168.56.1 -j REJECT  # то же, но будет ответ типа адрес недоступен
sudo iptables -t filter -A INPUT -s 192.168.56.1 -j ACCEPT  # разрешим трафик с запрещенного IP-адреса

sudo iptables -F INPUT                                      # очистим правила

sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT          # разрешим вход tcp по 22-му порту
sudo iptables -A INPUT -p tcp -m multiport --dport 80,443 -j ACCEPT   # разрешим вход tcp по 80 и 443-му портам
sudo iptables -A INPUT -i lo -j ACCEPT                      # разрешим вход по интерфейсу loopback
sudo iptables -A INPUT -p icmp -j ACCEPT                    # разрешение на вход пакетов по протоколу cmp
sudo iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT # разрешение ответов серверов, к которым мы
                                                            # обращаемся (должно стоять самым первым)
sudo iptables -P INPUT DROP                                 # политика по умолчанию (запрет входящим пакетам)

sudo iptables -L или                                        # посмотрим правила
sudo iptables -L -nv

sudo iptables –A OUTPUT –p tcp --dport 443 –j REJECT        # Запрещаем исходящий трафик по протоколу

sudo iptables-save > ~/iptables_config                      # сохраним конфиги iptables

sudo iptables-restore < ~/iptables_config                   # восстановим сохраненные конфиги iptables

# Сетевые интерфейсы и команда ip

ip a                    # список всех интерфейсов
ip r                    # просмотр информации о маршрутах
ip -s a                 # показ статистики
ip -c -s a              # включение подсветки
ip a show enp0s3        # данные по одному интерфейсу
ip link show enp0s3     # данные уровня L2 (link)

# Сокеты и порты

ss                      # Socket stat
ss -ntlp                # TCP-сокеты в состоянии LISTEN
ss -ntulp               # TCP и UDP-сокеты в состоянии LISTEN
ss -tulpan              # Все TCP и UDP-сокеты

https://netplan.io/

############################################################## Мониторинг ресурсов
# top

top –o PID                          # запустим top c сортировкой по PID (по убыванию)
top –o -PID                         # запустим top c сортировкой по PID (по возрастанию)
                                    # Команда c меняет отображение последней колонки COMMAND (компактно
                                    # или подроб.)
                                    # Команда V (Shift+v) меняет отображение последней колонки COMMAND на вид дерева
o                                   # запуск фильтрации
=                                   # сбросить фильтрацию

top –u user_new                     # отфильтровать процессы по пользователю

# htop

sudo apt install htop               # Установим htop

htop                                # Запустим
                                    # Команды
                                    # F2 – вход в меню
                                    # F3 – поиск по процессам
                                    # F5 – отображать процессы в виде дерева
                                    # F6 – сортировка
                                    #o	t – инверсия сортировки
                                    # F9 – завершить процесс (kill)
                                    #•	u – фильтрация по пользователю
                                    #F10 - выход

# Загруженность процессора

# Зеленым цветом в диаграмме, показывающей загруженность CPU, обозначается 
# часть времени процессора, занятая процессами с нормальным приоритетом.

# Синим обозначается часть, занятая процессами с низким приоритетом. 
# Красным — процессы с приоритетом ядра. 
# Желтым — время процессора, потраченное на виртуализацию либо невольно 
# «украденное» другими пользователями, которые работают в других виртуальных 
# серверах, но на тех же физических ресурсах, и активно нагружают процессоры.

# Загруженность памяти

# Диаграмма, отображающая использование оперативной памяти, 
# состоит из трех цветов: зеленого, синего и желтого.

# Зеленый цвет показывает используемую оперативную память, 
# синий — буферы и 
# желтый — системный кеш.

# Возможные значения состояния процесса:

# R — [running or runnable] запущенные или находятся в очереди на запуск
# S — [interruptible sleep] прерываемый сон
# D — [uninterruptible sleep] непрерываемый сон (в основном IO)
# Z — [zombie] процесс зомби, прекращенный, но не забранный родителем
# T — Остановленный сигналом управления заданиями
# t — Остановленный отладчиком
# X — Мёртвый (не должен показываться)

ps aux | grep firefox                   # найдем среди запущенных процессов браузер Firefox

kill 12512                              # завершим процесс Firefox по его PID

kill -s 9 12512                         # передать сигнал 9 (жесткое прекращение работы)

############################################################## Команды df, du
df -h               # После запуска программы можно увидеть название устройства (диска),
                    # общий размер, используемое пространство в абсолютном значении,
                    # доступное пространство, используемое пространство в процентах
                    # и путь, к которому прикреплено устройство.

df –hT --total

du                  # Команда du
du -h

du -s               #Если нужно посмотреть суммарный объем файлов и папок,
du -sh              # находящихся в текущей директории, следует запустить команду 

du -sсh             # С итогами

############################################################### systemctl

systemctl | wc -l                   # Подсчитаем количество служб на машине

systemctl status sshd               # посмотрим инфо о службе SSH
systemctl start <имя программы>     # запуск ранее установленной программы
systemctl stop <имя программы>      # остановка ранее установленной программы
systemctl restart <имя программы>   # перезвпуск ранее установленной программы (с остановкой), т.е.
                                    # стартует уже новый процесс с другим PID, новыми соединениями.
systemctl reload <имя программы>    # перегрузка ранее установленной программы (без остановки, 
                                    # н-р, после изменения конфигов)

################################################################ ufw

В Linux Ubuntu есть удобная обертка над утилитой iptables, называется ufw. Многие системные администраторы выбирают ее. Почитать можно тут: https://losst.ru/nastrojka-ufw-ubuntu

################################################################# Nginx

sudo apt install nginx -y                       # установка

systemctl status nginx                          # узнать статус nginx (active или нет)
sudo ss -ntlp                                   # смотрим порты (какие службы какие порты слушают)
( sudo ps afx | grep nginx )                    # посмотреть процессы nginx
ll /etc/nginx                                   # конфиги тут
nano /etc/nginx/nginx.conf
sudo nginx -t                                   # проверка конфигов, статуса (синтаксис)

sudo systemctl reload nginx                     # применение конфигов (если меняем что-то)

nano /etc/nginx/sites-enabled/default           # Конфиги сайта по умолчанию


###################################################### Apache 

sudo apt install apache2 -y                     # Установка

sudo apachectl -t                               # проверка синтаксиса
sudo systemctl status apache2                   # проверка статуса
sudo ss -ntlp                                   # кто какие порты слушает
                             
nano /etc/apache2/apache2.conf                  # конфиги тут

sudo nano ports.conf                            # тут меняем порты

sudo systemctl reload apache2                   # применение конфигов (если меняем что-то)
sudo systemctl start apache2                    # запустим apache

sudo nano /etc/apache2/sites-enabled/000-default.conf   # правим сайт на порт 8080
 

###################################################### Reverse proxy

sudo nano /etc/nginx/sites-enabled/default      # настройки тут. Там, где location /, надо 
                                                # закомментировать строку try_files $uri/ =404;
                                                # и вставить следующие строки:

proxy_pass http://localhost:9000;
proxy_set_header Host $host;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Real-IP $remote_addr;
                                                # можно добавить следующее для картинок и прочих:
location ~* ^.+.(jpg|jpeg|gif|png|iso|css|zip|pdf|txt|tar|js)$ {    # статических ресурсов
    root /var/www/html;                         # откуда забираем
}

sudo nginx –t                                   # проверим, перезапустим
sudo systemctl reload apache2

###################################################### PHP-FPM

sudo apt install libapache2-mod-php8.1 php8.1 -y    # установка

cd /etc/apache2/mods-enabled/                   # путь к конфигам
ll
nano php8.1.conf

apt install php8.1-fpm                          # установка
cd /etc/php/8.1/
ll

cd /var/www/html/
sudo su                                         # в режим рута
nano info.php                                   # создаем такой файл, с простым кодом:
<?php
        phpinfo();
?>

systemctl restart apache2
systemctl restart nginx

в браузере:  localhost/info.php                 # должны увидеть ответ от Apache страница php

apt install php-fpm
cd /etc/php/8.1
cd fpm/pool.d
ll
nano www.conf                                   # запоминаем путь под listen = /run/php/php8.1-fpm.sock
cd /etc/nginx/sites-enabled                     # далее возвращаемся в nginx/sites-enabled
sudo nano default                               # там, где location для php, раскомментируем строки:
location ~ \.php {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.1-fpm.sock;
}
sudo nginx –t                                   # проверяем синтаксис
systemctl reload nhinx                          # перезапускаем, проверяем статус
                                                # Итог: в браузере отвечает FastCGI (т.е. php)

https://losst.pro/ustanovka-phpmyadmin-ubuntu-18-04     Установка PhpMyAdmin

sudo apt install php-mbstring -y
sudo apt install phpmyadmin -y
###################################################### MySQL

sudo apt install mysql-server-8.0 -y            # установка

systemctl status mysql                          # проверка

sudo mysql -u root -p                           # вход на MySQL сервер

show databases;                                 # список БД

use mysql;                                      # переключиться на выбранную БД

SELECT * FROM user\G;                           # прочитать все из таблицы user

CREATE DATABASE gb;                             # создать БД

SHOW TABLES;                                    # показать таблицы

CREATE TABLE users(id INT, email VARCHAR(100)); # создать таблицу users

# вставить новые строки в таблицу
INSERT INTO users VALUES (1, 'ivan@mail.ru'),(2, 'user2@mail.ru'),(3, 'user3@mail.ru');

update users
    -> set email = 'user222@gmail.com';
    -> where id = 2;

delete from users where id = 3;

######################################################## Docker

sudo apt install docker.io -y           # ставим докер
   # или
sudo apt install docker -y              # (разница не существенна)

docker --help                           # посмотрим в справке основные команды

sudo usermod -aG docker $USER           # включение юзера в группу docker (можно работать без sudo)
sudo service docker restart             # перезапуск докера
newgrp docker                           # перечитываются группы. Вот теперь без sudo
 
sudo docker ps                          # Списки контейнеров 
sudo docker ps -a                       # история всех контейнеров, которые мы запускали когда-то
sudo docker images                      # и образов

sudo docker run hello-world             # запустим hello world

# оф. доки рекомендуют знакомиться с докером с запуска этого контейнера

docker run -dp 80:80 docker/getting-started # запустим контейнер с названием getting-started (документация)
	если его локально нет, то его образ скачается и тогда уже контейнер запустится
	заходим в браузер по пути http://localhost:80

docker stop 4fc0289cdd93                # удалим контейнер, указав его ID


                                        # пустим веб сервер [1:05]
docker search nginx                     # поищем

docker pull nginx                       # скачаем образ

docker run -d -p 8123:80 nginx          # запустим веб сервер nginx на докере с пробросом портов (р)
                                        # -d (detouch - отсоединить, чтобы высвободить командную строку)
	Теперь в браузере заходим на веб сервер по адресу: http://localhost:8123

docker exec -it jolly_meitner /bin/bash    # войдем в докер, найдем HTML-файлы

find / -name index.html               # найдем файл-заглушку на вебсерере

exit                                    # выход из контейнера

# Dockerfile

nano Dockerfile
                                        # напишем инструкции для сборки нового образа:
FROM ubuntu:latest                      # FROM определяет базовый образ, из кот.будет собираться конт-р
MAINTAINER GB_student                   # сообщит контейнеру имя автора создаваемого образа
RUN apt-get update                      # RUN - запустит команду внутри образа
RUN apt-get install nginx -y            # ADD - берет файлы с хоста и кладет внутрь образа
VOLUME "/var/www/html"                  # VOLUME - директория, которая будет подключена в контейнер
EXPOSE 80                               # задаст порт, через кот-й конт-р будет общаться с внешним миром
CMD /usr/sbin/nginx -g "daemon off;"    # команда, кот.будет запущена при старте конт-ра из образа

docker build -t my_nginx_image .        # соберем образ из инструкций в Dockerfile

docker images                           # увидеть наш новый образ можно так:

docker run -d -p 9000:80 my_nginx_image # запускаем наш образ на порту 8080
                                        # docker run --name container_name image_name
 
# Управление сетями в docker

docker network ls                       # просмотреть доступные сети
docker network inspect network_name     # просмотреть участников сети
iptables                                # доступ к приложениям, запущенным в контейнере

# Docker-compose

sudo apt install docker-compose -y      #  устанавливаем

mkdir wordpress_site                    # создадим веб-сайт на Wordpress
cd wordpress_site

nano docker-compose.yml                 # этот файл должен для каждого контейнера лежать в отдельной папке

1 version: '3'                          # '3'  - используется третья версия формата файлов для doc-comp
2 services:                             # эта директива описывает службу, кот.мы будем запускать
    nginx:                              # далее идет имя nginx
        image: nginx:latest             # собираем конт-р из последней стабильной версии nginx c Docker Hub
        ports:                          # директивой port пробрасываем 
            - 80:80                     # 80-й порт хост-машины
        volumes:                        # директивой volume пробрасываем каталог 
            - /var/www/html             # /var/www/html хост-машины

wordpress:
    image: wordpress
    links:
     - mariadb:mysql
    environment:
     - WORDPRESS_DB_PASSWORD=password
     - WORDPRESS_DB_USER=root
    ports:
     - "public_ip:80:80"
    volumes:
     - ./html:/var/www/html
mariadb:
    image: mariadb
    environment:
     - MYSQL_ROOT_PASSWORD=password
     - MYSQL_DATABASE=wordpress
    volumes:
     - ./database:/var/lib/mysql
	 
sudo docker-compose up -d
	http://localhost:80

docker ps
docker ps -a
docker ps -aq

docker images

docker rm 860aba9898c5                  # Удаляем все

docker rm $(docker ps -aq)              # или так (все сразу)

docker rmi –f e1f77663ea39              # удаление образа

docker rmi $(docker images -q)          # удалить все образы

############################################################## Условные связки команд
cat ~/Dockerfile || echo error

cat ~/Dockerfile && echo success

cat ~/dockerfile || echo error

cat ~/dockerfile && echo success

// Только после успешного выполнения первой команды будет выполнено обновление (upgrade)
sudo apt update && sudo apt upgrade

############################################################## cat

cat test.txt                        # Просмотр с помощью cat

man ls > ls.txt                     # Создадим новый файл 

cat file1 file2                     # Объединяем два файла
 
cat file1 file2 file3               # Объединяем три файла
 
cat file1 file2 file3 > total       # Объединяем и сохраняем в файл

############################################################## Конвейер команд (pipes)

man wc                              # Использование утилиты для подсчёта строк, слов и символов в файле

cat file1 | wc -l                   # Подсчитываем строки с использованием конвеера |

cat file1 file2 file3 | wc -l       # Подсчитываем строки в трёх файлах 
 

cat file1 file2 file3 | wc -c       # Подсчитываем байты в трёх файлах 

cat file1 file2 file3 | wc          # Получаем значения по количеству строк, слов и символов

cat file1 file2 file3 | wc -w       # Подсчитываем слова 

cat file* | wc                      # Используем шаблон подстановки *

ls -l | grep txt | wc -l            # Составляем более сложную команду

cat mciri_poem.txt | grep -o 'ты' | wc -w   # Сколько раз слово 'ты' встречается в поэме Мцыри?

############################################################## Перенаправление потоков ввода-вывода

# отправим результат выполнения команды find в файл python_scripts.txt, а ошибки будем писать в errors.txt 
find / -type f -name *.py 1>python_scripts.txt 2>errors.txt

# пусть ошибки уходят в тот же файл, куда и результаты поиска
find / -type f -name *.py 1>all_results.txt 2>&1

#################################################################### Bash

cat > script1.sh                # пример запуска скрипта
                                #!/bin/bash
echo It works!                  # code comment sample
echo "Working dir: " $(pwd)
echo "User name: " $USER
echo "OS: " $(uname)
Ctrl+d

chmod +x script1.sh             # Добавляем разрешение на выполнение

ls -l                           # Проверяем

./script1.sh                    # Запускаем

#################################################################### Циклы

for char in {1..10}; do echo $char; done    # Цикл for in

for n in {1..4}
  do 
    echo "Linux является одной из самых безопасных операционных систем"
  done

# Если вам необходимо часто использовать такую конструкцию, тогда не помешает 
# создать соответствующую bash-функцию (добавьте в ~/.bashrc)
function run() {
	number=$1
	shift
	for n in $(seq $number); do
  	$@
	done
}

# run 5 <КОМАНДА>

# Пример
run 5 echo "Я умею использовать операционную систему Windows Server Standart 2012 R2"

#################################################################### Условия
# скрипт, проверяющий введенный возраст и выдающий соответствующее приветствие
cat > age_check
#!/bin/bash
if [ $1 == 18 ]; then
	echo "Предъявите документы"
elif [ $1 -lt 18 ]; then
	echo "Вход только для взрослых"
elif [ $1 -gt 18 ]; then
	echo "Добро пожаловать"
fi

# запустим скрипт с разными параметрами
bash age_check 10
bash age_check 18
bash age_check 20

#################################################################### Условия
nano burger_cost

#!/bin/bash
case $1 in
  10)
    echo "Дайте два!"
    ;;
  100)
    echo "Хорошо,  спасибо"
    ;;
  50 | 60)
    echo "Колу со льдом, пожалуйста!"
    ;;
  *)
    echo "Что, простите?"
    ;;
esac

# запуск
bash burger_cost 10
bash burger_cost 50
bash burger_cost 100
bash burger_cost asdfas

#################################################################### Циклы
# Цикл for

for n in {1..4}; do echo $n "Linux - одна из самых безопсных ОС"; done  # однострочный цикл for
                                                                        # выводит фразу 4 раза

# Цикл while
# Цикл while будет в работе, пока условие, заданное в списке команды 1, будет верным

y=1
while [ $y -lt 10 ]
do
  echo $y
  y=$(( $y + 1 ))
done


#################################################################### Цикл until
# Пример цикла until

#!/bin/bash
POINTER=20
until [ $POINTER -lt 10 ]
do
  echo POINTER $POINTER
  let POINTER-=1
done


#################################################################### Цикл until
# Пример работы с файлами

#!/bin/bash
directory=$1
if [ -e $directory ] then
 	hidden_count=$(ls -A $directory | grep '^\.' | wc -l)
 	echo “Hidden files in $directory found: $hidden_count”
	else     	echo "Error. No such directory."
fi 
if [ -z $directory ] then
        echo "The string is empty." #если строка пустая, сообщаем об ошибке        
		exit # завершаем скрипт 
else
       echo $directory # в противном случае выводим на экран значение параметра
fi



























